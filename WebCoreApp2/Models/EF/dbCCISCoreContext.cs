// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CCISWebCore.Models.EF
{
    public partial class dbCCISCoreContext : DbContext
    {
        public dbCCISCoreContext()
        {
        }

        public dbCCISCoreContext(DbContextOptions<dbCCISCoreContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EnergyStarContact> EnergyStarContact { get; set; }
        public virtual DbSet<EnergyStarCorporation> EnergyStarCorporation { get; set; }
        public virtual DbSet<EnergyStarCriteria> EnergyStarCriteria { get; set; }
        public virtual DbSet<EnergyStarProduct> EnergyStarProduct { get; set; }
        public virtual DbSet<EnergyStarProductSpec> EnergyStarProductSpec { get; set; }
        public virtual DbSet<InfoTag> InfoTag { get; set; }
        public virtual DbSet<Infos> Infos { get; set; }
        public virtual DbSet<Knowledged> Knowledged { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<EnergyStarContact>(entity =>
            {
                entity.HasKey(e => e.IdContacts);

                entity.ToTable("EnergyStar_Contact");

                entity.Property(e => e.IdContacts).HasColumnName("ID_CONTACTS");

                entity.Property(e => e.DtCreate)
                    .HasColumnName("DT_CREATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtModify)
                    .HasColumnName("DT_MODIFY")
                    .HasColumnType("datetime");

                entity.Property(e => e.VrContacts)
                    .IsRequired()
                    .HasColumnName("VR_CONTACTS")
                    .HasMaxLength(20);

                entity.Property(e => e.VrContactsAddress)
                    .HasColumnName("VR_CONTACTS_ADDRESS")
                    .HasMaxLength(200);

                entity.Property(e => e.VrContactsEmail)
                    .HasColumnName("VR_CONTACTS_EMAIL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrContactsFax)
                    .HasColumnName("VR_CONTACTS_FAX")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrContactsPhone)
                    .HasColumnName("VR_CONTACTS_PHONE")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EnergyStarCorporation>(entity =>
            {
                entity.HasKey(e => e.IdCop);

                entity.ToTable("EnergyStar_Corporation");

                entity.Property(e => e.IdCop).HasColumnName("ID_COP");

                entity.Property(e => e.DtCopCreate)
                    .HasColumnName("DT_COP_CREATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCopModify)
                    .HasColumnName("DT_COP_MODIFY")
                    .HasColumnType("datetime");

                entity.Property(e => e.VrCopCode).HasColumnName("VR_COP_CODE");

                entity.Property(e => e.VrCopEngName)
                    .HasColumnName("VR_COP_ENG_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VrCopName)
                    .IsRequired()
                    .HasColumnName("VR_COP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.VrCopPrincipal)
                    .IsRequired()
                    .HasColumnName("VR_COP_PRINCIPAL")
                    .HasMaxLength(20);

                entity.Property(e => e.VrCopPrincipalEmail)
                    .HasColumnName("VR_COP_PRINCIPAL_EMAIL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrCopPrincipalFax)
                    .HasColumnName("VR_COP_PRINCIPAL_FAX")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrCopPrincipalPhone)
                    .HasColumnName("VR_COP_PRINCIPAL_PHONE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrCopUrl)
                    .IsRequired()
                    .HasColumnName("VR_COP_URL")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EnergyStarCriteria>(entity =>
            {
                entity.HasKey(e => e.IdCrt);

                entity.ToTable("EnergyStar_Criteria");

                entity.Property(e => e.IdCrt)
                    .HasColumnName("ID_CRT")
                    .ValueGeneratedNever();

                entity.Property(e => e.DtCrtCreate)
                    .HasColumnName("DT_CRT_CREATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCrtModify)
                    .HasColumnName("DT_CRT_MODIFY")
                    .HasColumnType("datetime");

                entity.Property(e => e.ICrtLabelTypeId).HasColumnName("I_CRT_LABEL_TYPE_ID");

                entity.Property(e => e.VrCrtCode)
                    .HasColumnName("VR_CRT_CODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VrCrtDesc).HasColumnName("VR_CRT_DESC");

                entity.Property(e => e.VrCrtEngDesc)
                    .HasColumnName("VR_CRT_ENG_DESC")
                    .IsUnicode(false);

                entity.Property(e => e.VrCrtEngName)
                    .HasColumnName("VR_CRT_ENG_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VrCrtName)
                    .IsRequired()
                    .HasColumnName("VR_CRT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.VrCrtShowEngName)
                    .HasColumnName("VR_CRT_SHOW_ENG_NAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VrCrtShowName)
                    .HasColumnName("VR_CRT_SHOW_NAME")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EnergyStarProduct>(entity =>
            {
                entity.HasKey(e => e.IdPdt);

                entity.ToTable("EnergyStar_Product");

                entity.Property(e => e.IdPdt).HasColumnName("ID_PDT");

                entity.Property(e => e.DtPdtCreate)
                    .HasColumnName("DT_PDT_CREATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPdtModify)
                    .HasColumnName("DT_PDT_MODIFY")
                    .HasColumnType("datetime");

                entity.Property(e => e.IPdtCorporationId).HasColumnName("I_PDT_CORPORATION_ID");

                entity.Property(e => e.IPdtCriteriaId).HasColumnName("I_PDT_CRITERIA_ID");

                entity.Property(e => e.IdContacts).HasColumnName("ID_CONTACTS");

                entity.Property(e => e.VrPdtCode).HasColumnName("VR_PDT_CODE");

                entity.Property(e => e.VrPdtDesc).HasColumnName("VR_PDT_DESC");

                entity.Property(e => e.VrPdtEngDesc)
                    .HasColumnName("VR_PDT_ENG_DESC")
                    .IsUnicode(false);

                entity.Property(e => e.VrPdtEngName)
                    .HasColumnName("VR_PDT_ENG_NAME")
                    .HasMaxLength(100);

                entity.Property(e => e.VrPdtEngUse)
                    .IsRequired()
                    .HasColumnName("VR_PDT_ENG_USE")
                    .IsUnicode(false);

                entity.Property(e => e.VrPdtName)
                    .IsRequired()
                    .HasColumnName("VR_PDT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.VrPdtPicUrl)
                    .HasColumnName("VR_PDT_PIC_URL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrPdtSmallpicUrl)
                    .HasColumnName("VR_PDT_SMALLPIC_URL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VrPdtUse)
                    .IsRequired()
                    .HasColumnName("VR_PDT_USE");

                entity.HasOne(d => d.IPdtCorporation)
                    .WithMany(p => p.EnergyStarProduct)
                    .HasForeignKey(d => d.IPdtCorporationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnergyStar_Product_EnergyStar_Corporation");

                entity.HasOne(d => d.IPdtCriteria)
                    .WithMany(p => p.EnergyStarProduct)
                    .HasForeignKey(d => d.IPdtCriteriaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnergyStar_Product_EnergyStar_Criteria");

                entity.HasOne(d => d.IdContactsNavigation)
                    .WithMany(p => p.EnergyStarProduct)
                    .HasForeignKey(d => d.IdContacts)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnergyStar_Product_EnergyStar_Contact");
            });

            modelBuilder.Entity<EnergyStarProductSpec>(entity =>
            {
                entity.HasKey(e => e.IdPds);

                entity.ToTable("EnergyStar_Product_Spec");

                entity.Property(e => e.IdPds).HasColumnName("ID_PDS");

                entity.Property(e => e.DtPdsCreate)
                    .HasColumnName("DT_PDS_CREATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPdsModify)
                    .HasColumnName("DT_PDS_MODIFY")
                    .HasColumnType("datetime");

                entity.Property(e => e.IPdsProductId).HasColumnName("I_PDS_PRODUCT_ID");

                entity.Property(e => e.IPdsSeqNum).HasColumnName("I_PDS_SEQ_NUM");

                entity.Property(e => e.VrPdsDesc).HasColumnName("VR_PDS_DESC");

                entity.Property(e => e.VrPdsEngDesc)
                    .HasColumnName("VR_PDS_ENG_DESC")
                    .IsUnicode(false);

                entity.Property(e => e.VrPdsEngName)
                    .HasColumnName("VR_PDS_ENG_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VrPdsName)
                    .IsRequired()
                    .HasColumnName("VR_PDS_NAME")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IPdsProduct)
                    .WithMany(p => p.EnergyStarProductSpec)
                    .HasForeignKey(d => d.IPdsProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnergyStar_Product_Spec_EnergyStar_Product");
            });

            modelBuilder.Entity<InfoTag>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InfoId).HasColumnName("Info_ID");

                entity.Property(e => e.TagId).HasColumnName("tag_ID");

                entity.Property(e => e.TagType)
                    .HasColumnName("tag_type")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Info)
                    .WithMany(p => p.InfoTag)
                    .HasForeignKey(d => d.InfoId)
                    .HasConstraintName("FK_InfoTag_Infos");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.InfoTag)
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InfoTag_Tag");
            });

            modelBuilder.Entity<Infos>(entity =>
            {
                entity.Property(e => e.HtmlUrl).HasMaxLength(100);
            });

            modelBuilder.Entity<Knowledged>(entity =>
            {
                entity.Property(e => e.CostYear)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefiProjectClass)
                    .HasColumnName("Defi_ProjectClass")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutiveUnit)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InfoLink)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KeywordEng)
                    .HasColumnName("Keyword_Eng")
                    .IsUnicode(false);

                entity.Property(e => e.KeywordTw)
                    .HasColumnName("Keyword_Tw")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumberLaw)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PlanHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlanName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectClass)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SummaryTw)
                    .HasColumnName("Summary_Tw")
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}